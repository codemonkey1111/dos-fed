{"version":3,"sources":["webpack:///delegated ./node_modules/lodash.debounce/index.js from dll-reference vendor","webpack:///./src/routes/farm/index.tsx"],"names":["module","exports","__webpack_require__","lpABI","pool2Abi","routerAbi","Root","div","FooterContainer","NetworkContainer","NetworkWarning","WarningSymbol","FarmWrapper","FarmOperation","FarmOperationItem","FarmOperationImg","img","FarmOperationLabel","label","FarmOperationSubLabel","ButtonWrapper","DisabledButton","button","Button","Exit","StakeButton","DepositEthWrapper","DepositEthInput","notify","dappId","networkId","globalWeb3","globalAddress","initWeb3","provider","web3","eth","extend","methods","name","call","outputFormatter","utils","hexToNumber","setIsClaiming","address","setAddress","setWeb3","lpContract","setLpContract","poolContract","setPoolContract","routerContract","setRouterContract","setConnected","setChainId","allowance","setAllowance","stakeLp","setStakeLp","rewards","setRewards","lpAmount","setLpAmount","stakeInput","setStakeInput","unStakeInput","setUnStakeInput","stakeVisible","setStakeVisible","unStakeVisible","setUnStakeVisible","setEth","slippage","setSlippage","apy","setApy","setNetworkId","loadWeb3Modal","logoutOfWeb3Modal","lpAddr","poolAddr","uniswapRouterAddr","onlineTime","Date","getTime","style","position","left","top","transform","alignItems","marginTop","justifyContent","fontSize","color","marginRight","date","async","undefined","subscribeProvider","getAccounts","net","getId","chainId","tempLpContract","Contract","abi","tempPoolContract","tempRouterContract","fetchBalance","err","console","error","connect","on","accounts","log","window","location","reload","fetchAllowance","fetchLpAmount","fetchRewards","fetchStakeLp","fetchApy","getBalance","then","balance","dividedBy","toFixed","earned","amount","balanceOf","toNumber","reserveData","getReserves","reserve0","totalSupply","lpPrice","multipliedBy","totalStake","rewardRate","dosPrice","getAmountsOut","length","tempApy","a","height","value","onChange","e","onClick","maxPrice","reserve1","autoStakeETHPool2","pow","send","from","data","emitter","hash","status","display","tipFormatter","defaultValue","width","max","min","href","target","margin","src","getRewardDOS","approve","constants","MaxUint256","toString","exitPool2","title","footer","visible","onOk","onCancel","stakePool2","withdrawAndClaimPool2","times"],"mappings":"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","file":"6.bundle.js","sourcesContent":["module.exports = (__webpack_require__(5))(535);","import React, { useState, useEffect } from \"react\";\nimport styled from \"styled-components\";\nimport { ethers } from \"ethers\";\nimport Countdown from 'react-countdown';\nimport Header from \"../../components/dao/Header\";\nimport Footer from \"../../components/dao/Footer\";\nimport useWeb3Modal from \"../../components/dao/hooks/useWeb3Modal\";\nimport Web3 from \"web3\";\nimport BigNumber from 'bignumber.js'\nimport bng from '../../assets/GASDAOTRANSPARENT.png'\nimport { RiErrorWarningLine } from \"react-icons/ri\";\nimport { InputNumber, message, Modal, Slider } from \"antd\";\nimport Notify from \"bnc-notify\"\nconst lpABI = require(\"../../abi/lp.json\");\nconst pool2Abi = require(\"../../abi/pool.json\");\nconst routerAbi = require(\"../../abi/unirouter.json\");\n\nconst Root = styled.div`\n  max-width: 100vw;\n  display: flex;\n  min-height: 100vh;\n  overflow: hidden;\n  flex-direction: column;\n  align-items: stretch;\n  overflow: hidden;\n`;\n\nconst FooterContainer = styled.div`\n  display: flex;\n  flex: 1;\n  align-items: flex-end;\n  margin: 1rem 4rem;\n`;\n\nconst NetworkContainer = styled.div`\n  display: flex;\n  align-items: center;\n  flex-direction: row;\n  justify-content: center;\n  align-items: stretch;\n`;\n\nconst NetworkWarning = styled.div`\n  display: flex;\n  padding: 0.5rem 1rem;\n  align-items: center;\n  justify-content: center;\n  background-color: transparent;\n  min-height: 30px;\n  background: #f7f8fa;\n  border-radius: 12px;\n  color: #717171;\n  border: 1px solid #e3e3e3;\n`;\n\nconst WarningSymbol = styled.div`\n  display: flex;\n  padding: 0.5rem 0.5rem 0.5rem 0;\n  align-items: center;\n  justify-content: center;\n  color: red;\n  font-size: 18px;\n`;\n\nconst FarmWrapper = styled.div`\n  display: flex;\n  align-items: center;\n  flex-direction: column;\n  justify-content: center;\n`\nconst FarmOperation = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n`;\n\nconst FarmOperationItem = styled.div`\n  background: #baceff;\n  border: 1px solid #005dc2;\n  border-radius: 12px;\n  box-shadow: rgb(123 41 41) 1px 1px 0px inset;\n  display: flex;\n  flex: 1 1 0%;\n  flex-direction: column;\n  overflow: hidden;\n  width: 300px;\n  justify-content: center;\n  align-items: center;\n  padding: 24px;\n  margin-right: 20px;\n`;\n\nconst FarmOperationImg = styled.img`\n  width: 88px;\n  height: 88px;\n  margin: 24px 0;\n`\n\nconst FarmOperationLabel = styled.label`\n  color: rgb(250, 250, 250);\n  font-size: 36px;\n  font-weight: 700;\n`\n\nconst FarmOperationSubLabel = styled.label`\n  color: rgb(255, 232, 232);\n`\nconst ButtonWrapper = styled.div`\n  display: flex;\n  -webkit-box-pack: center;\n  justify-content: space-between;\n  margin-top: 48px;\n  width: 100%;\n  align-items: center;\n`\n\nconst DisabledButton = styled.button`\n  -webkit-box-align: center;\n  align-items: center;\n  overflow: hidden;\n  background-color: #baceff;\n  border: 1px solid #005dc2;\n  border-radius: 12px;\n  color: rgba(0, 93, 154, 0.333);\n  cursor: pointer;\n  display: flex;\n  font-size: 16px;\n  font-weight: 700;\n  height: 56px;\n  -webkit-box-pack: center;\n  justify-content: center;\n  outline: none;\n  padding-left: 24px;\n  padding-right: 24px;\n  pointer-events: none;\n  width: 100%;\n`\n\nconst Button = styled.button`\n  -webkit-box-align: center;\n  align-items: center;\n  overflow: hidden;\n  background-color: #baceff;\n  border: 1px solid #005dc2;\n  border-radius: 12px;\n  color: #005dc2;\n  cursor: pointer;\n  display: flex;\n  font-size: 16px;\n  font-weight: 700;\n  height: 56px;\n  -webkit-box-pack: center;\n  justify-content: center;\n  outline: none;\n  padding-left: 24px;\n  padding-right: 24px;\n  width: 100%;\n`\nconst Exit = styled.button`\n  -webkit-box-align: center;\n  align-items: center;\n  overflow: hidden;\n  background-color: #baceff;\n  border: 1px solid #005dc2;\n  border-radius: 12px;\n  color: #005dc2;\n  cursor: pointer;\n  display: flex;\n  font-size: 16px;\n  font-weight: 700;\n  height: 56px;\n  -webkit-box-pack: center;\n  justify-content: center;\n  outline: none;\n  padding-left: 24px;\n  padding-right: 24px;\n  width: 300px;\n  margin-top: 20px;\n`\nconst StakeButton = styled.button`\n  -webkit-box-align: center;\n  align-items: center;\n  overflow: hidden;\n  background-color: #baceff;\n  border: 1px solid #005dc2;\n  border-radius: 12px;\n  color: #005dc2;\n  cursor: pointer;\n  display: flex;\n  font-size: 16px;\n  font-weight: 700;\n  height: 56px;\n  -webkit-box-pack: center;\n  justify-content: center;\n  outline: none;\n  padding-left: 24px;\n  padding-right: 24px;\n  width: 100px;\n`\n\nconst DepositEthWrapper = styled.div`\n  margin: 24px 0;\n  border: 1px solid #005dc2;\n  border-radius: 12px;\n  padding: 16px;\n`\nconst DepositEthInput = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n`\n\nconst notify = Notify({\n  dappId: 'dcc20d17-0e12-41e2-98f2-15638bef6241',       // [String] The API key created by step one above\n  networkId: 1  //\n});\n\nlet globalWeb3: any = null;\nlet globalAddress: any = null;\n\nexport function initWeb3(provider: any) {\n  const web3: any = new Web3(provider);\n\n  web3.eth.extend({\n    methods: [\n      {\n        name: \"chainId\",\n        call: \"eth_chainId\",\n        outputFormatter: web3.utils.hexToNumber,\n      },\n    ],\n  });\n\n  globalWeb3 = web3;\n\n  return web3;\n}\n\nfunction Home() {\n  const [, setIsClaiming] = useState(false);\n  // const INITIAL_STATE: IAppState = {\n  //   fetching: false,\n  //   address: \"\",\n  //   web3: null,\n  //   provider: null,\n  //   connected: false,\n  //   chainId: 1,\n  //   networkId: 1,\n  //   assets: [],\n  //   showModal: false,\n  //   pendingRequest: false,\n  //   result: null\n  // };\n  const [address, setAddress] = useState(\"\");\n  const [web3, setWeb3] = useState(null);\n  const [lpContract, setLpContract] = useState(null);\n  const [poolContract, setPoolContract] = useState(null);\n  const [routerContract, setRouterContract] = useState(null);\n  const [, setConnected] = useState(false);\n  const [, setChainId] = useState(1);\n  const [allowance, setAllowance] = useState(new BigNumber(0));\n  const [stakeLp, setStakeLp] = useState(new BigNumber(0));\n  const [rewards, setRewards] = useState(new BigNumber(0));\n  const [lpAmount, setLpAmount] = useState(new BigNumber(0));\n  const [stakeInput, setStakeInput] = useState(0);\n  const [unStakeInput, setUnStakeInput] = useState(0);\n  const [stakeVisible, setStakeVisible] = useState(false);\n  const [unStakeVisible, setUnStakeVisible] = useState(false);\n  const [eth, setEth] = useState(0);\n  const [slippage, setSlippage] = useState(5);\n  const [apy, setApy] = useState(0);\n\n  const [networkId, setNetworkId] = useState(1);\n  const [provider, loadWeb3Modal, logoutOfWeb3Modal] = useWeb3Modal();\n\n  const lpAddr = '0x4c053c1cd9047263e70c9f731691aead7a56be94';\n  // const lpAddr = '0xc28c4e511db16a0b7510bc3140dded1426962156'; // goerli\n  const poolAddr = '0x5251fF06Fc6EfA30AdA0e5560CA907AeE023Fb69';\n  // const poolAddr = '0xeB3C085FBc1030bb127114CB1A3B9A02A24eF62d'; // goerli\n  const uniswapRouterAddr = '0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D';\n  const DOSAddr = '0xc2acf7540f76a3cb389513b7128eb1e4d0d72391';\n  const WETH = '0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2';\n  const onlineTime = new Date(1641398400000);\n\n  if (new Date().getTime() < 1641398400000) {\n    return (\n      <div>\n        <Header\n          provider={provider}\n          loadWeb3Modal={loadWeb3Modal}\n          logoutOfWeb3Modal={logoutOfWeb3Modal}\n          address={address}\n          setIsClaiming={setIsClaiming}\n        />\n        <div style={{\n          position: 'fixed',\n          left: '50%',\n          top: '50%',\n          transform: 'translate(-50%, -50%)',\n          alignItems: 'center',\n          marginTop: 80,\n          justifyContent: 'center',\n          fontSize: 60,\n          color: '#005dc2'\n        }}>\n          <span style={{ marginRight: 10 }}>Countdown</span><Countdown date={onlineTime} />\n        </div>\n      </div>\n    )\n  }\n\n  useEffect(() => {\n    async function connect() {\n      try {\n        if (!provider || provider === undefined) {\n          return;\n        }\n\n        await subscribeProvider(provider);\n        const web3: any = initWeb3(provider);\n        const accounts = await web3.eth.getAccounts();\n        const address = accounts[0];\n        const networkId = await web3.eth.net.getId();\n        const chainId = await web3.eth.chainId();\n        \n\n        setWeb3(web3);\n        setConnected(true);\n        setAddress(address);\n        setChainId(chainId);\n        setNetworkId(networkId);\n        globalAddress = address;\n\n        const tempLpContract = new web3.eth.Contract(\n          lpABI.abi,\n          lpAddr\n        );\n\n        const tempPoolContract = new web3.eth.Contract(\n          pool2Abi.abi,\n          poolAddr\n        );\n\n        const tempRouterContract = new web3.eth.Contract(\n          routerAbi,\n          uniswapRouterAddr\n        );\n\n        setLpContract(tempLpContract);\n        setPoolContract(tempPoolContract);\n        setRouterContract(tempRouterContract);\n        // await getAccountAssets();\n        fetchBalance(address);\n      } catch (err) {\n        console.error(err);\n      }\n    }\n    connect();\n  }, [provider]);\n\n  const subscribeProvider = async (provider: any) => {\n    if (!provider.on) {\n      return;\n    }\n    // provider.on(\"close\", () => this.resetApp());\n    provider.on(\"accountsChanged\", async (accounts: string[]) => {\n      setAddress(accounts[0]);\n      console.log(accounts[0]);\n      console.log(\"account changed\");\n      // do this in a less hacky way\n      window.location.reload();\n      // await getAccountAssets();\n    });\n    provider.on(\"chainChanged\", async (chainId: number) => {\n      // const { web3 } = this.state;\n      // do this in a less hacky way\n      window.location.reload();\n      // @ts-ignore\n      const networkId = await web3.eth.net.getId();\n      setChainId(chainId);\n      setNetworkId(networkId);\n      // await getAccountAssets();\n    });\n  };\n\n  useEffect(() => {\n    if (address) {\n      if (lpContract) {\n        fetchAllowance();\n        fetchLpAmount();\n      }\n\n      if (poolContract) {\n        fetchRewards();\n        fetchStakeLp();\n      }\n    }\n  }, [address, lpContract, poolContract])\n\n  useEffect(() => {\n    if (lpContract && poolContract && routerContract) {\n      fetchApy();\n    }\n  }, [routerContract, lpContract, poolContract])\n\n\n  const fetchBalance = async (address: string) => {\n    // @ts-ignore\n    (globalWeb3).eth.getBalance(address).then((balance: any) => {\n      console.log(balance, 'balance');\n      setEth(+new BigNumber(balance).dividedBy(10 ** 18).toFixed(2));\n    })\n  }\n\n  const fetchRewards =async () => {\n    // @ts-ignore\n    poolContract.methods\n      .earned(globalAddress)\n      .call()\n      .then((amount: any) => {\n        setRewards(new BigNumber(amount));\n      });\n  }\n\n  const fetchStakeLp = async () => {\n    // @ts-ignore\n    poolContract.methods\n      .balanceOf(globalAddress)\n      .call()\n      .then((amount: any) => {\n        setStakeLp(new BigNumber(amount));\n        setUnStakeInput(new BigNumber(amount).dividedBy(10 ** 18).toNumber());\n      });\n  }\n\n  const fetchLpAmount = async () => {\n    // @ts-ignore\n    lpContract.methods\n      .balanceOf(globalAddress)\n      // .balanceOf('0x6cd941a53402a9cad5991cdbe7839d362f8e61c6')\n      .call()\n      .then((amount: any) => {\n        setLpAmount(new BigNumber(amount));\n        setStakeInput(new BigNumber(amount).div(10 ** 18).toNumber())\n      });\n  }\n\n  // const fetchApy = async () => {\n  //   // @ts-ignore\n  //   const reserveData = await lpContract.methods\n  //     .getReserves()\n  //     .call();\n  //   const { reserve0 } = reserveData;\n  //   // @ts-ignore\n  //   const totalSupply = await lpContract.methods\n  //     .totalSupply()\n  //     .call();\n\n  //   const lpPrice = new BigNumber(reserve0).multipliedBy(2)\n  //   .dividedBy(new BigNumber(totalSupply));\n  //   // @ts-ignore\n  //   const totalStake = await poolContract.methods\n  //     .totalSupply()\n  //     .call();\n    \n  //   const tempApy = new BigNumber(totalStake).multipliedBy(lpPrice)\n  //   .multipliedBy(52)\n  //   .dividedBy(10** 18);\n  //   setApy(tempApy.toNumber()* 100);\n  // }\n\n  const fetchApy = async () => {\n    // @ts-ignore\n    const reserveData = await lpContract.methods\n      .getReserves()\n      .call();\n    const { reserve0 } = reserveData;\n    // @ts-ignore\n    const totalSupply = await lpContract.methods\n      .totalSupply()\n      .call();\n\n    const lpPrice = new BigNumber(reserve0).multipliedBy(2)\n      .dividedBy(new BigNumber(totalSupply))\n      // .dividedBy(1e18);\n    // @ts-ignore\n    const totalStake = await poolContract.methods\n      .totalSupply()\n      .call();\n    // @ts-ignore\n    let rewardRate = await poolContract.methods\n      .rewardRate()\n      .call();\n\n    rewardRate = new BigNumber(rewardRate);\n    \n    // @ts-ignore\n    let dosPrice = await routerContract.methods\n      .getAmountsOut(new BigNumber(1e18), [DOSAddr, WETH])\n      .call();\n    \n    dosPrice = dosPrice[dosPrice.length - 1];\n    const tempApy = (((rewardRate)\n    .multipliedBy(new BigNumber(dosPrice).multipliedBy(1e18 * 7 * 24 * 60 * 60)))\n    .dividedBy(new BigNumber(totalStake).multipliedBy(new BigNumber(lpPrice))))\n    .multipliedBy(52)\n    .dividedBy(1e34);\n    setApy(tempApy.toNumber());\n  }\n\n\n  const fetchAllowance = async () => {\n    // @ts-ignore\n    lpContract.methods\n      .allowance(globalAddress, poolAddr)\n      .call()\n      .then((a: any) => {\n        setAllowance(new BigNumber(a));\n      });\n        // props.setIsClaiming(false);\n  }\n\n  const depositEth = async () => {\n    let maxPrice = new BigNumber(0);\n    // @ts-ignore\n    const reserveData = await lpContract.methods\n      .getReserves()\n      .call();\n    \n    const { reserve0, reserve1 } = reserveData;\n    maxPrice = new BigNumber(reserve0).dividedBy(new BigNumber(reserve1))\n    maxPrice = maxPrice.multipliedBy(new BigNumber(1 + slippage / 100))\n      .multipliedBy(new BigNumber(10 ** 18));\n    // @ts-ignore\n    poolContract.methods\n      // .balanceOf(address)\n      .autoStakeETHPool2(new BigNumber(maxPrice).multipliedBy(new BigNumber(10).pow(18)))\n      .send({ from: address, value: new BigNumber(eth).multipliedBy(new BigNumber(10 ** 18)) }, (err: any, data: any) => {\n        if (!err) {\n          const { emitter } = notify.hash(data);\n          emitter.on('all', (data: any) => {\n            const { status } = data;\n            if (status === 'confirmed') {\n              fetchBalance(globalAddress);\n              fetchStakeLp();\n              fetchRewards();\n            }\n            if (status !== 'pending') {\n              setStakeVisible(false);\n            }\n          })\n          return;\n        }\n        message.error('stake error');\n      })\n      .then(console.log);\n  }\n\n  const approve = async () => {\n    // setApproveLoading(true);\n    // @ts-ignore\n    lpContract.methods\n      // .balanceOf(address)\n      .approve(poolAddr, ethers.constants.MaxUint256.toString())\n      .send({ from: address }, (err: any, data: any) => {\n        if (!err) {\n          const { emitter } = notify.hash(data);\n          emitter.on('all', (data: any) => {\n            const { status } = data;\n            if (status === 'confirmed') {\n              fetchAllowance();\n            }\n            if (status !== 'pending') {\n              // setApproveLoading(false);\n            }\n          })\n          return;\n        }\n        // setApproveLoading(false);\n        message.error('approve error');\n      })\n      .then(console.log);\n  }\n\n  const stake = async () => {\n    // @ts-ignore\n    poolContract.methods\n      // .balanceOf(address)\n      .stakePool2(new BigNumber(stakeInput).multipliedBy(new BigNumber(10).pow(18)))\n      .send({ from: address }, (err: any, data: any) => {\n        console.log(err, data);\n        if (!err) {\n          const { emitter } = notify.hash(data);\n          emitter.on('all', (data: any) => {\n            const { status } = data;\n            if (status === 'confirmed') {\n              fetchStakeLp();\n              fetchLpAmount();\n            }\n            if (status !== 'pending') {\n              setStakeVisible(false);\n            }\n          })\n          return;\n        }\n        message.error('stake error');\n      })\n      .then(console.log);\n  }\n  \n  const unStake = async () => {\n    // setStakeLoading(true);\n    // @ts-ignore\n    poolContract.methods\n      // .balanceOf(address)\n      .withdrawAndClaimPool2(new BigNumber(unStakeInput).times(new BigNumber(10).pow(18)))\n      .send({ from: address }, (err: any, data: any) => {\n        console.log(data);\n        if (!err) {\n          const { emitter } = notify.hash(data);\n          emitter.on('all', (data: any) => {\n            const { status } = data;\n            if (status === 'confirmed') {\n              fetchStakeLp();\n              fetchLpAmount();\n            }\n            if (status !== 'pending') {\n              // setUnstakeLoading(false);\n              setUnStakeVisible(false);\n            }\n          })\n          return;\n        }\n        message.error('unStake error');\n      })\n      .then(console.log);\n  }\n\n  const harvest = async () => {\n    // @ts-ignore\n    poolContract.methods\n      // .balanceOf(address)\n      .getRewardDOS()\n      .send({ from: address }, (err: any, data: any) => {\n        if (!err) {\n          const { emitter } = notify.hash(data);\n          emitter.on('all', (data: any) => {\n            const { status } = data;\n            if (status === 'confirmed') {\n              fetchRewards();\n            }\n            if (status !== 'pending') {\n              // setUnstakeLoading(false);\n              setUnStakeVisible(false);\n            }\n          })\n          return;\n        }\n        message.error('harvest error');\n      })\n      .then(console.log);\n  }\n\n  const exit = async () => {\n    // @ts-ignore\n    poolContract.methods\n      // .balanceOf(address)\n      .exitPool2()\n      .send({ from: address }, (err: any, data: any) => {\n        if (!err) {\n          const { emitter } = notify.hash(data);\n          emitter.on('all', (data: any) => {\n            const { status } = data;\n            if (status === 'confirmed') {\n              fetchStakeLp();\n              fetchLpAmount();\n              fetchRewards();\n            }\n            if (status !== 'pending') {\n              // setUnstakeLoading(false);\n              setUnStakeVisible(false);\n            }\n          })\n          return;\n        }\n        message.error('exit error');\n      })\n      .then(console.log);\n  }\n\n  return (\n    <Root>\n      <div>\n        <Header\n          provider={provider}\n          loadWeb3Modal={loadWeb3Modal}\n          logoutOfWeb3Modal={logoutOfWeb3Modal}\n          address={address}\n          setIsClaiming={setIsClaiming}\n        />\n        {networkId !== 1 && (\n          <NetworkContainer>\n            <NetworkWarning>\n              <WarningSymbol>\n                <RiErrorWarningLine />\n              </WarningSymbol>\n              Please change your network to Ethereum Mainnet\n            </NetworkWarning>\n          </NetworkContainer>\n        )}\n        <FarmWrapper>\n          <h1>Eternal Lands</h1>\n          <h4>\n            Deposit ETH and earn DOS\n          </h4>\n          <DepositEthWrapper>\n            <DepositEthInput>\n              <InputNumber\n                style={{ height: 40, marginRight: 20 }}\n                value={eth}\n                onChange={(e) => {\n                  setEth(e || 0);\n                }}\n              />\n              <StakeButton onClick={depositEth}>\n                Deposit\n              </StakeButton>\n            </DepositEthInput>\n            <div style={{ display: 'flex', alignItems: 'center'}}>\n              Slippage\n              <Slider\n                tipFormatter={(value: any) => `${value}%`}\n                defaultValue={5}\n                style={{ width: 200 }}\n                max={10}\n                min={1}\n                value={slippage}\n                onChange={(e: any) => {\n                  console.log('e', e);\n                  setSlippage(e);\n                }}\n              />\n            </div>\n          </DepositEthWrapper>\n          <h4>Deposit <a href=\"https://app.uniswap.org/#/add/v2/ETH/0xc2acf7540f76a3cb389513b7128eb1e4d0d72391\" target=\"_blank\">UNI_LP</a> and earn DOS</h4>\n          <h3 style={{ margin: 10 }}>\n            apy {apy}%\n          </h3>\n          <FarmOperation>\n            <FarmOperationItem>\n              <FarmOperationImg\n                src={bng}\n              />\n              <FarmOperationLabel>\n                {rewards.div(10 ** 18).toNumber().toFixed(2)}\n              </FarmOperationLabel>\n              <FarmOperationSubLabel>\n                DOSs earned\n              </FarmOperationSubLabel>\n              <ButtonWrapper>\n                {\n                  !rewards.toNumber()\n                  ? (\n                      <DisabledButton>\n                        Harvest\n                      </DisabledButton>\n                  )\n                  : (\n                    <Button onClick={harvest}>\n                      Harvest\n                    </Button>\n                  )\n                }\n              </ButtonWrapper>\n            </FarmOperationItem>\n            <FarmOperationItem>\n              <FarmOperationImg\n                src={bng}\n              />\n              <FarmOperationLabel>\n                {stakeLp.div(10 ** 18).toNumber().toFixed(2)}\n              </FarmOperationLabel>\n              <FarmOperationSubLabel>\n                UNI_LP Staked\n              </FarmOperationSubLabel>\n              {\n                !!allowance.toNumber()\n                  ? (\n                    <ButtonWrapper>\n                      <StakeButton onClick={() => {\n                        setUnStakeVisible(true);\n                      }}>\n                        unStake\n                      </StakeButton>\n                      <StakeButton onClick={() => {\n                        setStakeVisible(true);\n                      }}>\n                        stake\n                      </StakeButton>\n                    </ButtonWrapper>\n                  )\n                  : (\n                    <ButtonWrapper>\n                      <Button onClick={approve}>\n                        Approve UNI_LP\n                      </Button>\n                    </ButtonWrapper>\n                  )\n              }\n\n            </FarmOperationItem>\n          </FarmOperation>\n          {\n            !!stakeLp.toNumber()\n            ? (\n                <Exit onClick={exit}>\n                  Harvest & Withdraw\n                </Exit>\n            )\n            : null\n          }\n        </FarmWrapper>\n        <FooterContainer>\n          <Footer />\n        </FooterContainer>\n        <Modal\n          title={null}\n          footer={null}\n          visible={stakeVisible}\n          onOk={() => {\n            setStakeVisible(false)\n          }}\n          onCancel={() => {\n            setStakeVisible(false)\n          }}\n        >\n          <ButtonWrapper>\n            <InputNumber\n              style={{ width: 340, height: 40 }}\n              value={stakeInput}\n              min={0}\n              max={+lpAmount.toNumber().toFixed(4)}\n              onChange={(e) => {\n                setStakeInput(e || 0);\n              }}\n            />\n            <StakeButton onClick={stake}>\n              stake\n            </StakeButton>\n          </ButtonWrapper>\n        </Modal>\n        <Modal\n          title={null}\n          footer={null}\n          visible={unStakeVisible}\n          onOk={() => {\n            setUnStakeVisible(false)\n          }}\n          onCancel={() => {\n            setUnStakeVisible(false)\n          }}\n        >\n          <ButtonWrapper>\n            <InputNumber\n              style={{ width: 340, height: 40 }}\n              value={unStakeInput}\n              min={0}\n              max={+stakeLp.toNumber().toFixed(4)}\n              onChange={(e) => {\n                setUnStakeInput(e || 0);\n              }}\n            />\n            <StakeButton onClick={unStake}>\n              unStake\n            </StakeButton>\n          </ButtonWrapper>\n        </Modal>\n      </div>\n    </Root>\n  );\n}\n\nexport default Home;\n"],"sourceRoot":""}